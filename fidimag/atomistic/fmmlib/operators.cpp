#include "operators.h"
#include "math.h"
void P2M_1(double x, double y, double z, double q, double * M) {
M[0] += q;
M[1] += -q*x;
M[2] += -q*y;
M[3] += -q*z;
}
void M2M_1(double x, double y, double z, double * M, double * Ms) {
Ms[0] += M[0];
Ms[1] += x*M[0] + M[1];
Ms[2] += y*M[0] + M[2];
Ms[3] += z*M[0] + M[3];
}

void M2L_1(double x, double y, double z, double * M, double * L) {
double R = sqrt(x*x + y*y + z*z);
double x0;
double x1;
double x2;
double x3;
x0 = 1.0/pow(R, 3);
x1 = x*x0;
x2 = x0*y;
x3 = x0*z;
L[0] += -x1*M[1] - x2*M[2] - x3*M[3] + M[0]/R;
L[1] += -x1*M[0];
L[2] += -x2*M[0];
L[3] += -x3*M[0];
}

void L2L_1(double x, double y, double z, double * L, double * Ls) {
Ls[0] += x*L[1] + y*L[2] + z*L[3] + L[0];
Ls[1] += L[1];
Ls[2] += L[2];
Ls[3] += L[3];
}

void L2P_1(double x, double y, double z, double * L, double * F) {
F[0] += -L[1];
F[1] += -L[2];
F[2] += -L[3];
}

void M2P_1(double x, double y, double z, double * M, double * F) {
double x0;
double x1;
double x2;
double x3;
double x4;
double x5;
double x6;
double x7;
double x8;
double x9;
double x10;
double x11;
x0 = pow(x, 2);
x1 = pow(y, 2);
x2 = pow(z, 2);
x3 = x0 + x1 + x2;
x4 = 1.0*pow(x3, -1.5);
x5 = x4*M[0];
x6 = 3.0*pow(x3, -2.5);
x7 = x6*M[2];
x8 = x*y;
x9 = x6*M[3];
x10 = x9*z;
x11 = x6*M[1];
F[0] += -x*x10 + x*x5 - x0*x11 + x4*M[1] - x7*x8;
F[1] += -x1*x7 - x10*y - x11*x8 + x4*M[2] + x5*y;
F[2] += -x*x11*z - x2*x9 + x4*M[3] + x5*z - x7*y*z;
}

void P2P(double x, double y, double z, double * S, double * F) {
double R = sqrt(x*x + y*y + z*z);
double x0;
x0 = 1.0*S[0]/pow(R, 3);
F[0] += x*x0;
F[1] += x0*y;
F[2] += x0*z;
}

void P2M_2(double x, double y, double z, double q, double * M) {
double x0;
double x1;
double x2;
x0 = q*x;
x1 = q*y;
x2 = (1.0/2.0)*q;
M[0] += q;
M[1] += -x0;
M[2] += -x1;
M[3] += -q*z;
M[4] += pow(x, 2)*x2;
M[5] += x0*y;
M[6] += x0*z;
M[7] += x2*pow(y, 2);
M[8] += x1*z;
M[9] += x2*pow(z, 2);
}
void M2M_2(double x, double y, double z, double * M, double * Ms) {
double x0;
double x1;
double x2;
x0 = x*M[0];
x1 = y*M[0];
x2 = (1.0/2.0)*M[0];
Ms[0] += M[0];
Ms[1] += x0 + M[1];
Ms[2] += x1 + M[2];
Ms[3] += z*M[0] + M[3];
Ms[4] += pow(x, 2)*x2 + x*M[1] + M[4];
Ms[5] += x*M[2] + x0*y + y*M[1] + M[5];
Ms[6] += x*M[3] + x0*z + z*M[1] + M[6];
Ms[7] += x2*pow(y, 2) + y*M[2] + M[7];
Ms[8] += x1*z + y*M[3] + z*M[2] + M[8];
Ms[9] += x2*pow(z, 2) + z*M[3] + M[9];
}

void M2L_2(double x, double y, double z, double * M, double * L) {
double R = sqrt(x*x + y*y + z*z);
double x0;
double x1;
double x2;
double x3;
double x4;
double x5;
double x6;
double x7;
double x8;
double x9;
double x10;
double x11;
double x12;
x0 = 1.0/pow(R, 3);
x1 = x*x0;
x2 = x0*y;
x3 = x0*z;
x4 = 3.0/pow(R, 5);
x5 = x*x4;
x6 = x5*y;
x7 = x5*z;
x8 = x4*y*z;
x9 = -x0;
x10 = pow(x, 2)*x4 + x9;
x11 = x4*pow(y, 2) + x9;
x12 = x4*pow(z, 2) + x9;
L[0] += -x1*M[1] + x10*M[4] + x11*M[7] + x12*M[9] - x2*M[2] - x3*M[3] + x6*M[5] + x7*M[6] + x8*M[8] + M[0]/R;
L[1] += -x1*M[0] + x10*M[1] + x6*M[2] + x7*M[3];
L[2] += x11*M[2] - x2*M[0] + x6*M[1] + x8*M[3];
L[3] += x12*M[3] - x3*M[0] + x7*M[1] + x8*M[2];
L[4] += x10*M[0];
L[5] += x6*M[0];
L[6] += x7*M[0];
L[7] += x11*M[0];
L[8] += x8*M[0];
L[9] += x12*M[0];
}

void L2L_2(double x, double y, double z, double * L, double * Ls) {
double x0;
double x1;
double x2;
x0 = y*L[5];
x1 = z*L[6];
x2 = z*L[8];
Ls[0] += (1.0/2.0)*pow(x, 2)*L[4] + x*x0 + x*x1 + x*L[1] + x2*y + (1.0/2.0)*pow(y, 2)*L[7] + y*L[2] + (1.0/2.0)*pow(z, 2)*L[9] + z*L[3] + L[0];
Ls[1] += x*L[4] + x0 + x1 + L[1];
Ls[2] += x*L[5] + x2 + y*L[7] + L[2];
Ls[3] += x*L[6] + y*L[8] + z*L[9] + L[3];
Ls[4] += L[4];
Ls[5] += L[5];
Ls[6] += L[6];
Ls[7] += L[7];
Ls[8] += L[8];
Ls[9] += L[9];
}

void L2P_2(double x, double y, double z, double * L, double * F) {
F[0] += -x*L[4] - y*L[5] - z*L[6] - L[1];
F[1] += -x*L[5] - y*L[7] - z*L[8] - L[2];
F[2] += -x*L[6] - y*L[8] - z*L[9] - L[3];
}

void M2P_2(double x, double y, double z, double * M, double * F) {
double x0;
double x1;
double x2;
double x3;
double x4;
double x5;
double x6;
double x7;
double x8;
double x9;
double x10;
double x11;
double x12;
double x13;
double x14;
double x15;
double x16;
double x17;
double x18;
double x19;
double x20;
double x21;
double x22;
double x23;
double x24;
double x25;
double x26;
x0 = pow(x, 2);
x1 = pow(y, 2);
x2 = pow(z, 2);
x3 = x0 + x1 + x2;
x4 = 1.0*pow(x3, -1.5);
x5 = x4*M[0];
x6 = pow(x3, -2.5);
x7 = x6*y;
x8 = 3.0*x7;
x9 = x6*z;
x10 = 3.0*x9;
x11 = x*x6;
x12 = 3.0*x11;
x13 = x12*y;
x14 = z*M[3];
x15 = 3.0*x6;
x16 = 15.0*pow(x3, -3.5);
x17 = x*x16;
x18 = x17*y*z;
x19 = x16*y;
x20 = x0*x19;
x21 = x16*z;
x22 = x0*x21;
x23 = x1*x17;
x24 = x17*x2;
x25 = x1*x21;
x26 = x19*x2;
F[0] += x*x5 - x0*x15*M[1] - x10*M[6] - x12*x14 - x13*M[2] + x18*M[8] + x20*M[5] + x22*M[6] + x4*M[1] - x8*M[5] - (x12 - x23)*M[7] - (x12 - x24)*M[9] - (-pow(x, 3)*x16 + 9.0*x11)*M[4];
F[1] += -x1*x15*M[2] - x10*M[8] - x12*M[5] - x13*M[1] - x14*x8 + x18*M[6] + x23*M[5] + x25*M[8] + x4*M[2] + x5*y - (-x20 + x8)*M[4] - (-x26 + x8)*M[9] - (-x16*pow(y, 3) + 9.0*x7)*M[7];
F[2] += -x12*z*M[1] - x12*M[6] - x15*x2*M[3] + x18*M[5] + x24*M[6] + x26*M[8] + x4*M[3] + x5*z - x8*z*M[2] - x8*M[8] - (x10 - x22)*M[4] - (x10 - x25)*M[7] - (-x16*pow(z, 3) + 9.0*x9)*M[9];
}

void P2M_3(double x, double y, double z, double q, double * M) {
double x0;
double x1;
double x2;
double x3;
double x4;
double x5;
double x6;
double x7;
double x8;
double x9;
double x10;
x0 = q*x;
x1 = q*y;
x2 = q*z;
x3 = pow(x, 2);
x4 = (1.0/2.0)*q;
x5 = x0*y;
x6 = pow(y, 2);
x7 = pow(z, 2);
x8 = (1.0/6.0)*q;
x9 = (1.0/2.0)*x3;
x10 = (1.0/2.0)*x0;
M[0] += q;
M[1] += -x0;
M[2] += -x1;
M[3] += -x2;
M[4] += x3*x4;
M[5] += x5;
M[6] += x0*z;
M[7] += x4*x6;
M[8] += x1*z;
M[9] += x4*x7;
M[10] += -pow(x, 3)*x8;
M[11] += -x1*x9;
M[12] += -x2*x9;
M[13] += -x10*x6;
M[14] += -x5*z;
M[15] += -x10*x7;
M[16] += -x8*pow(y, 3);
M[17] += -1.0/2.0*x2*x6;
M[18] += -1.0/2.0*x1*x7;
M[19] += -x8*pow(z, 3);
}
void M2M_3(double x, double y, double z, double * M, double * Ms) {
double x0;
double x1;
double x2;
double x3;
double x4;
double x5;
double x6;
double x7;
double x8;
double x9;
double x10;
double x11;
double x12;
double x13;
double x14;
double x15;
double x16;
double x17;
double x18;
x0 = x*M[0];
x1 = y*M[0];
x2 = z*M[0];
x3 = x*M[1];
x4 = pow(x, 2);
x5 = (1.0/2.0)*M[0];
x6 = x*M[2];
x7 = y*M[1];
x8 = x0*y;
x9 = x*M[3];
x10 = y*M[2];
x11 = pow(y, 2);
x12 = y*M[3];
x13 = pow(z, 2);
x14 = (1.0/2.0)*x4;
x15 = (1.0/6.0)*M[0];
x16 = (1.0/2.0)*M[1];
x17 = (1.0/2.0)*x11;
x18 = (1.0/2.0)*x13;
Ms[0] += M[0];
Ms[1] += x0 + M[1];
Ms[2] += x1 + M[2];
Ms[3] += x2 + M[3];
Ms[4] += x3 + x4*x5 + M[4];
Ms[5] += x6 + x7 + x8 + M[5];
Ms[6] += x0*z + x9 + z*M[1] + M[6];
Ms[7] += x10 + x11*x5 + M[7];
Ms[8] += x1*z + x12 + z*M[2] + M[8];
Ms[9] += x13*x5 + z*M[3] + M[9];
Ms[10] += pow(x, 3)*x15 + x*M[4] + x14*M[1] + M[10];
Ms[11] += x*M[5] + x1*x14 + x14*M[2] + x3*y + y*M[4] + M[11];
Ms[12] += x*M[6] + x14*x2 + x14*M[3] + x3*z + z*M[4] + M[12];
Ms[13] += x*M[7] + x0*x17 + x11*x16 + x6*y + y*M[5] + M[13];
Ms[14] += x*M[8] + x6*z + x7*z + x8*z + x9*y + y*M[6] + z*M[5] + M[14];
Ms[15] += x*M[9] + x0*x18 + x13*x16 + x9*z + z*M[6] + M[15];
Ms[16] += x15*pow(y, 3) + x17*M[2] + y*M[7] + M[16];
Ms[17] += x10*z + x17*x2 + x17*M[3] + y*M[8] + z*M[7] + M[17];
Ms[18] += x1*x18 + x12*z + x18*M[2] + y*M[9] + z*M[8] + M[18];
Ms[19] += x15*pow(z, 3) + x18*M[3] + z*M[9] + M[19];
}

void M2L_3(double x, double y, double z, double * M, double * L) {
double R = sqrt(x*x + y*y + z*z);
double x0;
double x1;
double x2;
double x3;
double x4;
double x5;
double x6;
double x7;
double x8;
double x9;
double x10;
double x11;
double x12;
double x13;
double x14;
double x15;
double x16;
double x17;
double x18;
double x19;
double x20;
double x21;
double x22;
double x23;
double x24;
double x25;
double x26;
double x27;
double x28;
double x29;
double x30;
double x31;
double x32;
double x33;
double x34;
double x35;
double x36;
double x37;
x0 = 1.0/pow(R, 3);
x1 = x*x0;
x2 = x0*y;
x3 = x0*z;
x4 = pow(R, -5);
x5 = 3.0*x4;
x6 = x*x5;
x7 = x6*y;
x8 = x6*z;
x9 = y*z;
x10 = x5*x9;
x11 = 15.0/pow(R, 7);
x12 = x*x11*x9;
x13 = -x0;
x14 = pow(x, 2);
x15 = x13 + x14*x5;
x16 = pow(y, 2);
x17 = x13 + x16*x5;
x18 = pow(z, 2);
x19 = x13 + x18*x5;
x20 = 9.0*x4;
x21 = -x11*x14;
x22 = x*(x20 + x21);
x23 = x21 + x5;
x24 = x23*y;
x25 = x11*x16;
x26 = -x25;
x27 = y*(x20 + x26);
x28 = x23*z;
x29 = z*(x26 + x5);
x30 = x11*x18;
x31 = z*(x20 - x30);
x32 = -x5;
x33 = 1.0*x;
x34 = x33*(x25 + x32);
x35 = x30 + x32;
x36 = x33*x35;
x37 = 1.0*x35*y;
L[0] += -x1*M[1] + x10*M[8] - x12*M[14] + x15*M[4] + x17*M[7] + x19*M[9] - x2*M[2] + x22*M[10] + x24*M[11] + x27*M[16] + x28*M[12] + x29*M[17] - x3*M[3] + x31*M[19] - x34*M[13] - x36*M[15] - x37*M[18] + x7*M[5] + x8*M[6] + M[0]/R;
L[1] += -x1*M[0] - x12*M[8] + x15*M[1] + x22*M[4] + x24*M[5] + x28*M[6] - x34*M[7] - x36*M[9] + x7*M[2] + x8*M[3];
L[2] += x10*M[3] - x12*M[6] + x17*M[2] - x2*M[0] + x24*M[4] + x27*M[7] + x29*M[8] - x34*M[5] - x37*M[9] + x7*M[1];
L[3] += x10*M[2] - x12*M[5] + x19*M[3] + x28*M[4] + x29*M[7] - x3*M[0] + x31*M[9] - x36*M[6] - x37*M[8] + x8*M[1];
L[4] += x15*M[0] + x22*M[1] + x24*M[2] + x28*M[3];
L[5] += -x12*M[3] + x24*M[1] - x34*M[2] + x7*M[0];
L[6] += -x12*M[2] + x28*M[1] - x36*M[3] + x8*M[0];
L[7] += x17*M[0] + x27*M[2] + x29*M[3] - x34*M[1];
L[8] += x10*M[0] - x12*M[1] + x29*M[2] - x37*M[3];
L[9] += x19*M[0] + x31*M[3] - x36*M[1] - x37*M[2];
L[10] += x22*M[0];
L[11] += x24*M[0];
L[12] += x28*M[0];
L[13] += -x34*M[0];
L[14] += -x12*M[0];
L[15] += -x36*M[0];
L[16] += x27*M[0];
L[17] += x29*M[0];
L[18] += -x37*M[0];
L[19] += x31*M[0];
}

void L2L_3(double x, double y, double z, double * L, double * Ls) {
double x0;
double x1;
double x2;
double x3;
double x4;
double x5;
double x6;
double x7;
double x8;
double x9;
double x10;
double x11;
double x12;
double x13;
double x14;
double x15;
double x16;
double x17;
x0 = y*L[5];
x1 = z*L[6];
x2 = z*L[8];
x3 = z*L[14];
x4 = x3*y;
x5 = (1.0/2.0)*pow(x, 2);
x6 = (1.0/2.0)*pow(y, 2);
x7 = (1.0/2.0)*pow(z, 2);
x8 = x*L[13];
x9 = x*L[15];
x10 = y*L[11];
x11 = z*L[12];
x12 = y*L[18];
x13 = z*L[17];
x14 = y*L[13];
x15 = y*L[14];
x16 = z*L[15];
x17 = z*L[18];
Ls[0] += (1.0/6.0)*pow(x, 3)*L[10] + x*x0 + x*x1 + x*x4 + x*L[1] + x10*x5 + x11*x5 + x12*x7 + x13*x6 + x2*y + x5*L[4] + x6*x8 + x6*L[7] + x7*x9 + x7*L[9] + (1.0/6.0)*pow(y, 3)*L[16] + y*L[2] + (1.0/6.0)*pow(z, 3)*L[19] + z*L[3] + L[0];
Ls[1] += x*x10 + x*x11 + x*L[4] + x0 + x1 + x4 + x5*L[10] + x6*L[13] + x7*L[15] + L[1];
Ls[2] += x*x14 + x*x3 + x*L[5] + x13*y + x2 + x5*L[11] + x6*L[16] + x7*L[18] + y*L[7] + L[2];
Ls[3] += x*x15 + x*x16 + x*L[6] + x17*y + x5*L[12] + x6*L[17] + x7*L[19] + y*L[8] + z*L[9] + L[3];
Ls[4] += x*L[10] + x10 + x11 + L[4];
Ls[5] += x*L[11] + x14 + x3 + L[5];
Ls[6] += x*L[12] + x15 + x16 + L[6];
Ls[7] += x13 + x8 + y*L[16] + L[7];
Ls[8] += x*L[14] + x17 + y*L[17] + L[8];
Ls[9] += x12 + x9 + z*L[19] + L[9];
Ls[10] += L[10];
Ls[11] += L[11];
Ls[12] += L[12];
Ls[13] += L[13];
Ls[14] += L[14];
Ls[15] += L[15];
Ls[16] += L[16];
Ls[17] += L[17];
Ls[18] += L[18];
Ls[19] += L[19];
}

void L2P_3(double x, double y, double z, double * L, double * F) {
double x0;
double x1;
double x2;
double x3;
double x4;
double x5;
x0 = x*y;
x1 = x*z;
x2 = y*z;
x3 = (1.0/2.0)*pow(x, 2);
x4 = (1.0/2.0)*pow(y, 2);
x5 = (1.0/2.0)*pow(z, 2);
F[0] += -x*L[4] - x0*L[11] - x1*L[12] - x2*L[14] - x3*L[10] - x4*L[13] - x5*L[15] - y*L[5] - z*L[6] - L[1];
F[1] += -x*L[5] - x0*L[13] - x1*L[14] - x2*L[17] - x3*L[11] - x4*L[16] - x5*L[18] - y*L[7] - z*L[8] - L[2];
F[2] += -x*L[6] - x0*L[14] - x1*L[15] - x2*L[18] - x3*L[12] - x4*L[17] - x5*L[19] - y*L[8] - z*L[9] - L[3];
}

void M2P_3(double x, double y, double z, double * M, double * F) {
double x0;
double x1;
double x2;
double x3;
double x4;
double x5;
double x6;
double x7;
double x8;
double x9;
double x10;
double x11;
double x12;
double x13;
double x14;
double x15;
double x16;
double x17;
double x18;
double x19;
double x20;
double x21;
double x22;
double x23;
double x24;
double x25;
double x26;
double x27;
double x28;
double x29;
double x30;
double x31;
double x32;
double x33;
double x34;
double x35;
double x36;
double x37;
double x38;
double x39;
double x40;
double x41;
double x42;
double x43;
double x44;
double x45;
double x46;
double x47;
double x48;
double x49;
double x50;
double x51;
double x52;
double x53;
double x54;
double x55;
double x56;
double x57;
double x58;
double x59;
double x60;
double x61;
double x62;
double x63;
double x64;
double x65;
double x66;
double x67;
double x68;
double x69;
double x70;
double x71;
double x72;
double x73;
double x74;
double x75;
double x76;
double x77;
x0 = pow(x, 2);
x1 = pow(y, 2);
x2 = pow(z, 2);
x3 = x0 + x1 + x2;
x4 = 1.0*pow(x3, -1.5);
x5 = x4*M[0];
x6 = pow(x3, -2.5);
x7 = 3.0*x6;
x8 = x7*y;
x9 = x7*z;
x10 = x*x7;
x11 = x10*y;
x12 = z*M[3];
x13 = pow(x3, -3.5);
x14 = 15.0*x13;
x15 = x14*y;
x16 = z*M[14];
x17 = x*x14;
x18 = x17*y;
x19 = x18*z;
x20 = x0*x14;
x21 = x20*y;
x22 = x20*z;
x23 = 105.0*pow(x3, -4.5);
x24 = x23*y;
x25 = x0*x24;
x26 = 9.0*x6;
x27 = -x20;
x28 = x1*x14;
x29 = -x28;
x30 = x29 + x7;
x31 = x14*x2;
x32 = -x31;
x33 = x32 + x7;
x34 = pow(x, 3);
x35 = x*x28;
x36 = x*x31;
x37 = x*x13;
x38 = x23*x34;
x39 = x*M[10];
x40 = -45.0*x37;
x41 = x38 + x40;
x42 = y*M[11];
x43 = z*M[12];
x44 = x*x23;
x45 = x1*x44;
x46 = 1.0*x;
x47 = x46*M[13];
x48 = x2*x44;
x49 = x17 - x48;
x50 = x46*M[15];
x51 = y*M[16];
x52 = 1.0*y*M[18];
x53 = z*M[17];
x54 = z*M[19];
x55 = x28*z;
x56 = x27 + x7;
x57 = pow(y, 3);
x58 = x31*y;
x59 = x13*y;
x60 = 45.0*x59;
x61 = x23*x57;
x62 = -x60;
x63 = x2*x24;
x64 = x15 - x63;
x65 = -x15 + x25;
x66 = pow(z, 3);
x67 = x13*z;
x68 = 45.0*x67;
x69 = x23*x66;
x70 = x68 - x69;
x71 = -x68;
x72 = x23*z;
x73 = x0*x72;
x74 = x14*z;
x75 = x1*x72;
x76 = -x74;
x77 = x73 + x76;
F[0] += x*x5 - x0*x7*M[1] - x10*x12 - x11*M[2] + x15*x16 - x16*x25 + x19*M[8] + x21*M[5] + x22*M[6] - x30*M[13] - x33*M[15] - x39*(-75.0*x37 + x38) + x4*M[1] - x41*x42 - x41*x43 + x47*(x17 - x45) + x49*x50 + x49*x52 - x51*(x40 + x45) - x53*(-x17 + x45) - x54*(x40 + x48) - x8*M[5] - x9*M[6] - (x10 - x35)*M[7] - (x10 - x36)*M[9] - (x26 + x27)*M[10] - (x*x26 - x14*x34)*M[4];
F[1] += -x1*x7*M[2] - x10*M[5] - x11*M[1] - x12*x8 + x16*x17 - x16*x45 + x19*M[6] - x33*M[18] + x35*M[5] - x39*(x25 + x62) + x4*M[2] - x42*x65 - x43*x65 + x47*(x60 - x61) + x5*y + x50*x64 - x51*(-75.0*x59 + x61) + x52*x64 - x53*(x61 + x62) - x54*(x62 + x63) + x55*M[8] - x56*M[11] - x9*M[8] - (-x21 + x8)*M[4] - (x26 + x29)*M[16] - (-x58 + x8)*M[9] - (-x14*x57 + x26*y)*M[7];
F[2] += -x10*z*M[1] - x10*M[6] + x18*M[14] + x19*M[5] - x2*x7*M[3] - x30*M[17] + x36*M[6] - x39*(x71 + x73) + x4*M[3] - x42*x77 - x43*x77 + x47*(x74 - x75) - x48*y*M[14] + x5*z + x50*x70 - x51*(x71 + x75) + x52*x70 - x53*(x75 + x76) - x54*(-75.0*x67 + x69) - x56*M[12] + x58*M[8] - x8*z*M[2] - x8*M[8] - (-x22 + x9)*M[4] - (x26 + x32)*M[19] - (-x55 + x9)*M[7] - (-x14*x66 + x26*z)*M[9];
}

void P2M_4(double x, double y, double z, double q, double * M) {
double x0;
double x1;
double x2;
double x3;
double x4;
double x5;
double x6;
double x7;
double x8;
double x9;
double x10;
double x11;
double x12;
double x13;
double x14;
double x15;
double x16;
double x17;
double x18;
double x19;
double x20;
double x21;
x0 = q*x;
x1 = q*y;
x2 = q*z;
x3 = pow(x, 2);
x4 = (1.0/2.0)*q;
x5 = x0*y;
x6 = x0*z;
x7 = pow(y, 2);
x8 = x1*z;
x9 = pow(z, 2);
x10 = pow(x, 3);
x11 = (1.0/6.0)*q;
x12 = (1.0/2.0)*x3;
x13 = (1.0/2.0)*x0;
x14 = pow(y, 3);
x15 = (1.0/2.0)*x7;
x16 = (1.0/2.0)*x9;
x17 = pow(z, 3);
x18 = (1.0/24.0)*q;
x19 = (1.0/6.0)*x10;
x20 = (1.0/4.0)*q*x3;
x21 = (1.0/6.0)*x0;
M[0] += q;
M[1] += -x0;
M[2] += -x1;
M[3] += -x2;
M[4] += x3*x4;
M[5] += x5;
M[6] += x6;
M[7] += x4*x7;
M[8] += x8;
M[9] += x4*x9;
M[10] += -x10*x11;
M[11] += -x1*x12;
M[12] += -x12*x2;
M[13] += -x13*x7;
M[14] += -x5*z;
M[15] += -x13*x9;
M[16] += -x11*x14;
M[17] += -x15*x2;
M[18] += -x1*x16;
M[19] += -x11*x17;
M[20] += pow(x, 4)*x18;
M[21] += x1*x19;
M[22] += x19*x2;
M[23] += x20*x7;
M[24] += x12*x8;
M[25] += x20*x9;
M[26] += x14*x21;
M[27] += x15*x6;
M[28] += x16*x5;
M[29] += x17*x21;
M[30] += x18*pow(y, 4);
M[31] += (1.0/6.0)*x14*x2;
M[32] += (1.0/4.0)*q*x7*x9;
M[33] += (1.0/6.0)*x1*x17;
M[34] += x18*pow(z, 4);
}
void M2M_4(double x, double y, double z, double * M, double * Ms) {
double x0;
double x1;
double x2;
double x3;
double x4;
double x5;
double x6;
double x7;
double x8;
double x9;
double x10;
double x11;
double x12;
double x13;
double x14;
double x15;
double x16;
double x17;
double x18;
double x19;
double x20;
double x21;
double x22;
double x23;
double x24;
double x25;
double x26;
double x27;
double x28;
double x29;
double x30;
double x31;
double x32;
double x33;
double x34;
double x35;
double x36;
double x37;
double x38;
double x39;
double x40;
double x41;
double x42;
double x43;
double x44;
double x45;
double x46;
double x47;
x0 = x*M[0];
x1 = y*M[0];
x2 = z*M[0];
x3 = x*M[1];
x4 = pow(x, 2);
x5 = (1.0/2.0)*M[0];
x6 = x*M[2];
x7 = y*M[1];
x8 = x0*y;
x9 = x*M[3];
x10 = z*M[1];
x11 = x0*z;
x12 = y*M[2];
x13 = pow(y, 2);
x14 = y*M[3];
x15 = z*M[2];
x16 = x1*z;
x17 = z*M[3];
x18 = pow(z, 2);
x19 = x*M[4];
x20 = (1.0/2.0)*x4;
x21 = pow(x, 3);
x22 = (1.0/6.0)*M[0];
x23 = x*M[5];
x24 = y*M[4];
x25 = x3*y;
x26 = x*M[6];
x27 = x*M[7];
x28 = y*M[5];
x29 = x6*y;
x30 = (1.0/2.0)*M[1];
x31 = (1.0/2.0)*x13;
x32 = x*M[8];
x33 = y*M[6];
x34 = x9*y;
x35 = x*M[9];
x36 = (1.0/2.0)*x18;
x37 = y*M[7];
x38 = pow(y, 3);
x39 = y*M[8];
x40 = y*M[9];
x41 = pow(z, 3);
x42 = (1.0/6.0)*x21;
x43 = (1.0/24.0)*M[0];
x44 = (1.0/4.0)*x4*M[0];
x45 = (1.0/6.0)*M[1];
x46 = (1.0/6.0)*x38;
x47 = (1.0/6.0)*x41;
Ms[0] += M[0];
Ms[1] += x0 + M[1];
Ms[2] += x1 + M[2];
Ms[3] += x2 + M[3];
Ms[4] += x3 + x4*x5 + M[4];
Ms[5] += x6 + x7 + x8 + M[5];
Ms[6] += x10 + x11 + x9 + M[6];
Ms[7] += x12 + x13*x5 + M[7];
Ms[8] += x14 + x15 + x16 + M[8];
Ms[9] += x17 + x18*x5 + M[9];
Ms[10] += x19 + x20*M[1] + x21*x22 + M[10];
Ms[11] += x1*x20 + x20*M[2] + x23 + x24 + x25 + M[11];
Ms[12] += x2*x20 + x20*M[3] + x26 + x3*z + z*M[4] + M[12];
Ms[13] += x0*x31 + x13*x30 + x27 + x28 + x29 + M[13];
Ms[14] += x32 + x33 + x34 + x6*z + x7*z + x8*z + z*M[5] + M[14];
Ms[15] += x0*x36 + x18*x30 + x35 + x9*z + z*M[6] + M[15];
Ms[16] += x22*x38 + x31*M[2] + x37 + M[16];
Ms[17] += x12*z + x2*x31 + x31*M[3] + x39 + z*M[7] + M[17];
Ms[18] += x1*x36 + x14*z + x36*M[2] + x40 + z*M[8] + M[18];
Ms[19] += x22*x41 + x36*M[3] + z*M[9] + M[19];
Ms[20] += pow(x, 4)*x43 + x*M[10] + x20*M[4] + x42*M[1] + M[20];
Ms[21] += x*M[11] + x1*x42 + x19*y + x20*x7 + x20*M[5] + x42*M[2] + y*M[10] + M[21];
Ms[22] += x*M[12] + x10*x20 + x19*z + x2*x42 + x20*M[6] + x42*M[3] + z*M[10] + M[22];
Ms[23] += x*M[13] + x12*x20 + x13*x44 + x20*M[7] + x23*y + x3*x31 + x31*M[4] + y*M[11] + M[23];
Ms[24] += x*M[14] + x14*x20 + x15*x20 + x16*x20 + x20*M[8] + x23*z + x24*z + x25*z + x26*y + y*M[12] + z*M[11] + M[24];
Ms[25] += x*M[15] + x17*x20 + x18*x44 + x20*M[9] + x26*z + x3*x36 + x36*M[4] + z*M[12] + M[25];
Ms[26] += x*M[16] + x0*x46 + x27*y + x31*x6 + x31*M[5] + x38*x45 + y*M[13] + M[26];
Ms[27] += x*M[17] + x10*x31 + x11*x31 + x27*z + x28*z + x29*z + x31*x9 + x31*M[6] + x32*y + y*M[14] + z*M[13] + M[27];
Ms[28] += x*M[18] + x32*z + x33*z + x34*z + x35*y + x36*x6 + x36*x7 + x36*x8 + x36*M[5] + y*M[15] + z*M[14] + M[28];
Ms[29] += x*M[19] + x0*x47 + x35*z + x36*x9 + x36*M[6] + x41*x45 + z*M[15] + M[29];
Ms[30] += x31*M[7] + x43*pow(y, 4) + x46*M[2] + y*M[16] + M[30];
Ms[31] += x15*x31 + x2*x46 + x31*M[8] + x37*z + x46*M[3] + y*M[17] + z*M[16] + M[31];
Ms[32] += x12*x36 + (1.0/4.0)*x13*x18*M[0] + x17*x31 + x31*M[9] + x36*M[7] + x39*z + y*M[18] + z*M[17] + M[32];
Ms[33] += x1*x47 + x14*x36 + x36*M[8] + x40*z + x47*M[2] + y*M[19] + z*M[18] + M[33];
Ms[34] += x36*M[9] + x43*pow(z, 4) + x47*M[3] + z*M[19] + M[34];
}

void M2L_4(double x, double y, double z, double * M, double * L) {
double R = sqrt(x*x + y*y + z*z);
double x0;
double x1;
double x2;
double x3;
double x4;
double x5;
double x6;
double x7;
double x8;
double x9;
double x10;
double x11;
double x12;
double x13;
double x14;
double x15;
double x16;
double x17;
double x18;
double x19;
double x20;
double x21;
double x22;
double x23;
double x24;
double x25;
double x26;
double x27;
double x28;
double x29;
double x30;
double x31;
double x32;
double x33;
double x34;
double x35;
double x36;
double x37;
double x38;
double x39;
double x40;
double x41;
double x42;
double x43;
double x44;
double x45;
double x46;
double x47;
double x48;
double x49;
double x50;
double x51;
double x52;
double x53;
double x54;
double x55;
double x56;
double x57;
double x58;
double x59;
double x60;
double x61;
double x62;
double x63;
double x64;
double x65;
double x66;
double x67;
double x68;
double x69;
double x70;
x0 = 1.0/pow(R, 3);
x1 = x*x0;
x2 = x0*y;
x3 = x0*z;
x4 = pow(R, -5);
x5 = 3.0*x4;
x6 = x*y;
x7 = x5*x6;
x8 = x*M[6];
x9 = x5*z;
x10 = y*z;
x11 = x10*x5;
x12 = pow(R, -7);
x13 = 15.0*x12;
x14 = x10*x13;
x15 = x*x14;
x16 = -x0;
x17 = pow(x, 2);
x18 = x16 + x17*x5;
x19 = pow(y, 2);
x20 = x16 + x19*x5;
x21 = pow(z, 2);
x22 = x16 + x21*x5;
x23 = 9.0*x4;
x24 = -x13*x17;
x25 = x*(x23 + x24);
x26 = x24 + x5;
x27 = x26*y;
x28 = x13*x19;
x29 = -x28;
x30 = y*(x23 + x29);
x31 = x26*z;
x32 = x29 + x5;
x33 = x32*z;
x34 = x13*x21;
x35 = -x34;
x36 = z*(x23 + x35);
x37 = -x5;
x38 = 1.0*x;
x39 = x38*(x28 + x37);
x40 = x34 + x37;
x41 = x38*x40;
x42 = 1.0*y;
x43 = x40*x42;
x44 = -45.0*x12;
x45 = pow(R, -9);
x46 = 105.0*x45;
x47 = x17*x46;
x48 = x*(x44 + x47);
x49 = x48*y;
x50 = x48*z;
x51 = x19*x46;
x52 = x44 + x51;
x53 = x10*x52;
x54 = -x13;
x55 = x10*(x47 + x54);
x56 = x38*x52*y;
x57 = 3.0*x6*(-5.0*x12 + 35.0*x21*x45);
x58 = x21*x46 + x44;
x59 = x38*z;
x60 = x58*x59;
x61 = x59*(x51 + x54);
x62 = x42*x58*z;
x63 = 90.0*x12;
x64 = pow(x, 4)*x46 - x17*x63 + x23;
x65 = -x19*x63 + x23 + x46*pow(y, 4);
x66 = -x21*x63 + x23 + x46*pow(z, 4);
x67 = x19*x47 + x26 + x29;
x68 = x21*x47 + x26 + x35;
x69 = x21*x51 + x32 + x35;
x70 = x*x9;
L[0] += -x1*M[1] + x11*M[8] - x15*M[14] + x18*M[4] - x2*M[2] + x20*M[7] + x22*M[9] + x25*M[10] + x27*M[11] - x3*M[3] + x30*M[16] + x31*M[12] + x33*M[17] + x36*M[19] - x39*M[13] - x41*M[15] - x43*M[18] + x49*M[21] + x50*M[22] + x53*M[31] + x55*M[24] + x56*M[26] + x57*M[28] + x60*M[29] + x61*M[27] + x62*M[33] + x64*M[20] + x65*M[30] + x66*M[34] + x67*M[23] + x68*M[25] + x69*M[32] + x7*M[5] + x8*x9 + M[0]/R;
L[1] += -x1*M[0] - x15*M[8] + x18*M[1] + x25*M[4] + x27*M[5] + x31*M[6] - x39*M[7] - x41*M[9] + x49*M[11] + x50*M[12] + x55*M[14] + x56*M[16] + x57*M[18] + x60*M[19] + x61*M[17] + x64*M[10] + x67*M[13] + x68*M[15] + x7*M[2] + x70*M[3];
L[2] += x11*M[3] - x14*x8 - x2*M[0] + x20*M[2] + x27*M[4] + x30*M[7] + x33*M[8] - x39*M[5] - x43*M[9] + x49*M[10] + x53*M[17] + x55*M[12] + x56*M[13] + x57*M[15] + x61*M[14] + x62*M[19] + x65*M[16] + x67*M[11] + x69*M[18] + x7*M[1];
L[3] += x11*M[2] - x15*M[5] + x22*M[3] - x3*M[0] + x31*M[4] + x33*M[7] + x36*M[9] - x41*M[6] - x43*M[8] + x50*M[10] + x53*M[16] + x55*M[11] + x57*M[14] + x60*M[15] + x61*M[13] + x62*M[18] + x66*M[19] + x68*M[12] + x69*M[17] + x70*M[1];
L[4] += x18*M[0] + x25*M[1] + x27*M[2] + x31*M[3] + x49*M[5] + x50*M[6] + x55*M[8] + x64*M[4] + x67*M[7] + x68*M[9];
L[5] += -x15*M[3] + x27*M[1] - x39*M[2] + x49*M[4] + x55*M[6] + x56*M[7] + x57*M[9] + x61*M[8] + x67*M[5] + x7*M[0];
L[6] += -x15*M[2] + x31*M[1] - x41*M[3] + x50*M[4] + x55*M[5] + x57*M[8] + x60*M[9] + x61*M[7] + x68*M[6] + x70*M[0];
L[7] += x20*M[0] + x30*M[2] + x33*M[3] - x39*M[1] + x53*M[8] + x56*M[5] + x61*M[6] + x65*M[7] + x67*M[4] + x69*M[9];
L[8] += x11*M[0] - x15*M[1] + x33*M[2] - x43*M[3] + x53*M[7] + x55*M[4] + x57*M[6] + x61*M[5] + x62*M[9] + x69*M[8];
L[9] += x22*M[0] + x36*M[3] - x41*M[1] - x43*M[2] + x57*M[5] + x60*M[6] + x62*M[8] + x66*M[9] + x68*M[4] + x69*M[7];
L[10] += x25*M[0] + x49*M[2] + x50*M[3] + x64*M[1];
L[11] += x27*M[0] + x49*M[1] + x55*M[3] + x67*M[2];
L[12] += x31*M[0] + x50*M[1] + x55*M[2] + x68*M[3];
L[13] += -x39*M[0] + x56*M[2] + x61*M[3] + x67*M[1];
L[14] += -x15*M[0] + x55*M[1] + x57*M[3] + x61*M[2];
L[15] += -x41*M[0] + x57*M[2] + x60*M[3] + x68*M[1];
L[16] += x30*M[0] + x53*M[3] + x56*M[1] + x65*M[2];
L[17] += x33*M[0] + x53*M[2] + x61*M[1] + x69*M[3];
L[18] += -x43*M[0] + x57*M[1] + x62*M[3] + x69*M[2];
L[19] += x36*M[0] + x60*M[1] + x62*M[2] + x66*M[3];
L[20] += x64*M[0];
L[21] += x49*M[0];
L[22] += x50*M[0];
L[23] += x67*M[0];
L[24] += x55*M[0];
L[25] += x68*M[0];
L[26] += x56*M[0];
L[27] += x61*M[0];
L[28] += x57*M[0];
L[29] += x60*M[0];
L[30] += x65*M[0];
L[31] += x53*M[0];
L[32] += x69*M[0];
L[33] += x62*M[0];
L[34] += x66*M[0];
}

void L2L_4(double x, double y, double z, double * L, double * Ls) {
double x0;
double x1;
double x2;
double x3;
double x4;
double x5;
double x6;
double x7;
double x8;
double x9;
double x10;
double x11;
double x12;
double x13;
double x14;
double x15;
double x16;
double x17;
double x18;
double x19;
double x20;
double x21;
double x22;
double x23;
double x24;
double x25;
double x26;
double x27;
double x28;
double x29;
double x30;
double x31;
double x32;
double x33;
double x34;
double x35;
double x36;
double x37;
double x38;
double x39;
double x40;
double x41;
double x42;
double x43;
double x44;
double x45;
double x46;
double x47;
double x48;
double x49;
double x50;
double x51;
double x52;
x0 = y*L[5];
x1 = z*L[6];
x2 = z*L[8];
x3 = z*L[14];
x4 = x3*y;
x5 = pow(x, 2);
x6 = (1.0/2.0)*x5;
x7 = (1.0/6.0)*pow(x, 3);
x8 = pow(y, 2);
x9 = (1.0/2.0)*x8;
x10 = (1.0/6.0)*pow(y, 3);
x11 = pow(z, 2);
x12 = (1.0/2.0)*x11;
x13 = (1.0/6.0)*pow(z, 3);
x14 = x*L[13];
x15 = x*L[26];
x16 = x*L[15];
x17 = x*L[29];
x18 = y*L[11];
x19 = z*L[12];
x20 = y*L[21];
x21 = z*L[22];
x22 = y*L[18];
x23 = y*L[33];
x24 = z*L[17];
x25 = z*L[31];
x26 = y*L[28];
x27 = x*x26;
x28 = z*L[27];
x29 = x*x28;
x30 = z*L[24];
x31 = x30*y;
x32 = (1.0/4.0)*x5;
x33 = x*L[23];
x34 = x*L[25];
x35 = y*L[13];
x36 = x28*y;
x37 = x*L[28];
x38 = y*L[23];
x39 = y*L[32];
x40 = y*L[14];
x41 = z*L[15];
x42 = z*L[18];
x43 = z*L[28];
x44 = x43*y;
x45 = x*L[27];
x46 = y*L[24];
x47 = z*L[25];
x48 = z*L[32];
x49 = y*L[26];
x50 = y*L[27];
x51 = z*L[29];
x52 = z*L[33];
Ls[0] += (1.0/24.0)*pow(x, 4)*L[20] + x*x0 + x*x1 + x*x4 + x*L[1] + x10*x15 + x10*x25 + x10*L[16] + x11*x32*L[25] + (1.0/4.0)*x11*x8*L[32] + x12*x16 + x12*x22 + x12*x27 + x12*L[9] + x13*x17 + x13*x23 + x13*L[19] + x14*x9 + x18*x6 + x19*x6 + x2*y + x20*x7 + x21*x7 + x24*x9 + x29*x9 + x31*x6 + x32*x8*L[23] + x6*L[4] + x7*L[10] + x9*L[7] + (1.0/24.0)*pow(y, 4)*L[30] + y*L[2] + (1.0/24.0)*pow(z, 4)*L[34] + z*L[3] + L[0];
Ls[1] += x*x18 + x*x19 + x*x31 + x*L[4] + x0 + x1 + x10*L[26] + x12*x26 + x12*x34 + x12*L[15] + x13*L[29] + x20*x6 + x21*x6 + x28*x9 + x33*x9 + x4 + x6*L[10] + x7*L[20] + x9*L[13] + L[1];
Ls[2] += x*x3 + x*x35 + x*x36 + x*L[5] + x10*L[30] + x12*x37 + x12*x39 + x12*L[18] + x13*L[33] + x15*x9 + x2 + x24*y + x25*x9 + x30*x6 + x38*x6 + x6*L[11] + x7*L[21] + x9*L[16] + y*L[7] + L[2];
Ls[3] += x*x40 + x*x41 + x*x44 + x*L[6] + x10*L[31] + x12*x17 + x12*x23 + x12*L[19] + x13*L[34] + x42*y + x45*x9 + x46*x6 + x47*x6 + x48*x9 + x6*L[12] + x7*L[22] + x9*L[17] + y*L[8] + z*L[9] + L[3];
Ls[4] += x*x20 + x*x21 + x*L[10] + x12*L[25] + x18 + x19 + x31 + x6*L[20] + x9*L[23] + L[4];
Ls[5] += x*x30 + x*x38 + x*L[11] + x12*L[28] + x3 + x35 + x36 + x6*L[21] + x9*L[26] + L[5];
Ls[6] += x*x46 + x*x47 + x*L[12] + x12*L[29] + x40 + x41 + x44 + x6*L[22] + x9*L[27] + L[6];
Ls[7] += x*x49 + x12*L[32] + x14 + x24 + x25*y + x29 + x6*L[23] + x9*L[30] + y*L[16] + L[7];
Ls[8] += x*x43 + x*x50 + x*L[14] + x12*L[33] + x42 + x48*y + x6*L[24] + x9*L[31] + y*L[17] + L[8];
Ls[9] += x*x51 + x12*L[34] + x16 + x22 + x27 + x52*y + x6*L[25] + x9*L[32] + z*L[19] + L[9];
Ls[10] += x*L[20] + x20 + x21 + L[10];
Ls[11] += x*L[21] + x30 + x38 + L[11];
Ls[12] += x*L[22] + x46 + x47 + L[12];
Ls[13] += x28 + x33 + x49 + L[13];
Ls[14] += x*L[24] + x43 + x50 + L[14];
Ls[15] += x26 + x34 + x51 + L[15];
Ls[16] += x15 + x25 + y*L[30] + L[16];
Ls[17] += x45 + x48 + y*L[31] + L[17];
Ls[18] += x37 + x39 + x52 + L[18];
Ls[19] += x17 + x23 + z*L[34] + L[19];
Ls[20] += L[20];
Ls[21] += L[21];
Ls[22] += L[22];
Ls[23] += L[23];
Ls[24] += L[24];
Ls[25] += L[25];
Ls[26] += L[26];
Ls[27] += L[27];
Ls[28] += L[28];
Ls[29] += L[29];
Ls[30] += L[30];
Ls[31] += L[31];
Ls[32] += L[32];
Ls[33] += L[33];
Ls[34] += L[34];
}

void L2P_4(double x, double y, double z, double * L, double * F) {
double x0;
double x1;
double x2;
double x3;
double x4;
double x5;
double x6;
double x7;
double x8;
double x9;
double x10;
double x11;
double x12;
double x13;
double x14;
double x15;
x0 = x*y;
x1 = x*z;
x2 = y*z;
x3 = (1.0/2.0)*pow(x, 2);
x4 = (1.0/6.0)*pow(x, 3);
x5 = (1.0/2.0)*pow(y, 2);
x6 = (1.0/6.0)*pow(y, 3);
x7 = (1.0/2.0)*pow(z, 2);
x8 = (1.0/6.0)*pow(z, 3);
x9 = x0*z;
x10 = x*x5;
x11 = x*x7;
x12 = x3*y;
x13 = x3*z;
x14 = x7*y;
x15 = x5*z;
F[0] += -x*L[4] - x0*L[11] - x1*L[12] - x10*L[23] - x11*L[25] - x12*L[21] - x13*L[22] - x14*L[28] - x15*L[27] - x2*L[14] - x3*L[10] - x4*L[20] - x5*L[13] - x6*L[26] - x7*L[15] - x8*L[29] - x9*L[24] - y*L[5] - z*L[6] - L[1];
F[1] += -x*L[5] - x0*L[13] - x1*L[14] - x10*L[26] - x11*L[28] - x12*L[23] - x13*L[24] - x14*L[32] - x15*L[31] - x2*L[17] - x3*L[11] - x4*L[21] - x5*L[16] - x6*L[30] - x7*L[18] - x8*L[33] - x9*L[27] - y*L[7] - z*L[8] - L[2];
F[2] += -x*L[6] - x0*L[14] - x1*L[15] - x10*L[27] - x11*L[29] - x12*L[24] - x13*L[25] - x14*L[33] - x15*L[32] - x2*L[18] - x3*L[12] - x4*L[22] - x5*L[17] - x6*L[31] - x7*L[19] - x8*L[34] - x9*L[28] - y*L[8] - z*L[9] - L[3];
}

void M2P_4(double x, double y, double z, double * M, double * F) {
double x0;
double x1;
double x2;
double x3;
double x4;
double x5;
double x6;
double x7;
double x8;
double x9;
double x10;
double x11;
double x12;
double x13;
double x14;
double x15;
double x16;
double x17;
double x18;
double x19;
double x20;
double x21;
double x22;
double x23;
double x24;
double x25;
double x26;
double x27;
double x28;
double x29;
double x30;
double x31;
double x32;
double x33;
double x34;
double x35;
double x36;
double x37;
double x38;
double x39;
double x40;
double x41;
double x42;
double x43;
double x44;
double x45;
double x46;
double x47;
double x48;
double x49;
double x50;
double x51;
double x52;
double x53;
double x54;
double x55;
double x56;
double x57;
double x58;
double x59;
double x60;
double x61;
double x62;
double x63;
double x64;
double x65;
double x66;
double x67;
double x68;
double x69;
double x70;
double x71;
double x72;
double x73;
double x74;
double x75;
double x76;
double x77;
double x78;
double x79;
double x80;
double x81;
double x82;
double x83;
double x84;
double x85;
double x86;
double x87;
double x88;
double x89;
double x90;
double x91;
double x92;
double x93;
double x94;
double x95;
double x96;
double x97;
double x98;
double x99;
double x100;
double x101;
double x102;
double x103;
double x104;
double x105;
double x106;
double x107;
double x108;
double x109;
double x110;
double x111;
double x112;
double x113;
double x114;
double x115;
double x116;
double x117;
double x118;
double x119;
double x120;
double x121;
double x122;
double x123;
double x124;
double x125;
double x126;
double x127;
double x128;
double x129;
double x130;
double x131;
double x132;
double x133;
double x134;
double x135;
double x136;
double x137;
double x138;
double x139;
double x140;
double x141;
double x142;
double x143;
double x144;
double x145;
double x146;
double x147;
double x148;
double x149;
double x150;
double x151;
x0 = pow(x, 2);
x1 = pow(y, 2);
x2 = pow(z, 2);
x3 = x0 + x1 + x2;
x4 = 1.0*pow(x3, -1.5);
x5 = x4*M[0];
x6 = pow(x3, -2.5);
x7 = 3.0*x6;
x8 = x7*y;
x9 = x7*z;
x10 = x*x7;
x11 = x10*y;
x12 = z*M[3];
x13 = pow(x3, -3.5);
x14 = 15.0*x13;
x15 = x14*y;
x16 = z*M[14];
x17 = x*x14;
x18 = y*z;
x19 = x17*x18;
x20 = x0*x14;
x21 = x20*y;
x22 = x20*z;
x23 = pow(x3, -4.5);
x24 = 105.0*x23;
x25 = x0*x24;
x26 = 9.0*x6;
x27 = -x20;
x28 = x1*x14;
x29 = -x28;
x30 = x29 + x7;
x31 = x14*x2;
x32 = -x31;
x33 = x32 + x7;
x34 = pow(x, 3);
x35 = 45.0*x13;
x36 = -x35;
x37 = x25 + x36;
x38 = x37*M[21];
x39 = 1.0*y;
x40 = x1*x24;
x41 = x36 + x40;
x42 = x41*M[26];
x43 = 35.0*x23;
x44 = 3.0*(-5.0*x13 + x2*x43)*M[28];
x45 = x37*M[22];
x46 = 1.0*z;
x47 = -x14;
x48 = (x40 + x47)*M[27];
x49 = x2*x24;
x50 = x36 + x49;
x51 = x46*x50;
x52 = x*x28;
x53 = x*x31;
x54 = x*x13;
x55 = x23*x34;
x56 = 105.0*x55;
x57 = x*M[10];
x58 = -x*x35;
x59 = x56 + x58;
x60 = y*M[11];
x61 = z*M[12];
x62 = x*x40;
x63 = 1.0*x;
x64 = x63*M[13];
x65 = x*x49;
x66 = x17 - x65;
x67 = x63*M[15];
x68 = y*M[16];
x69 = x39*M[18];
x70 = -x17 + x62;
x71 = z*M[17];
x72 = z*M[19];
x73 = x*x23;
x74 = pow(x3, -5.5);
x75 = 945.0*x74;
x76 = x34*x75;
x77 = -x76;
x78 = x*(525.0*x73 + x77);
x79 = y*M[21];
x80 = z*M[22];
x81 = 315.0*x73;
x82 = x18*M[24];
x83 = x*x75;
x84 = x1*x83;
x85 = -x84;
x86 = x81 + x85;
x87 = x63*y*M[26];
x88 = 315.0*x74;
x89 = x2*x88;
x90 = 3.0*x*y*M[28];
x91 = x63*z*M[27];
x92 = x63*M[29];
x93 = z*(-x2*x83 + x81);
x94 = x18*M[31];
x95 = x39*M[33];
x96 = 630.0*x73;
x97 = pow(y, 4);
x98 = pow(z, 4);
x99 = x28*z;
x100 = x27 + x7;
x101 = pow(y, 3);
x102 = (x25 + x47)*M[24];
x103 = x41*M[31];
x104 = x31*y;
x105 = x35*y;
x106 = x101*x24;
x107 = x13*y;
x108 = -x105;
x109 = x106 + x108;
x110 = x25*y;
x111 = x49*y;
x112 = -x111 + x15;
x113 = x110 - x15;
x114 = x23*y;
x115 = x101*x75;
x116 = -x115;
x117 = 525.0*x114 + x116;
x118 = 315.0*x114;
x119 = x75*y;
x120 = x0*x119;
x121 = -x120;
x122 = x*(x118 + x121);
x123 = z*(x118 - x119*x2);
x124 = 1050.0*x23;
x125 = 630.0*x114;
x126 = pow(x, 4);
x127 = y*M[14];
x128 = pow(z, 3);
x129 = x35*z;
x130 = x128*x24;
x131 = x129 - x130;
x132 = x13*z;
x133 = -x129;
x134 = x25*z;
x135 = x14*z;
x136 = x40*z;
x137 = -x135;
x138 = x134 + x137;
x139 = x24*z;
x140 = x23*z;
x141 = x128*x75;
x142 = z*(525.0*x140 - x141);
x143 = 315.0*x140;
x144 = x75*z;
x145 = x0*x144;
x146 = -x145;
x147 = x*(x143 + x146);
x148 = -x1*x144;
x149 = x143 + x148;
x150 = 630.0*x140;
x151 = x130 + x133;
F[0] += x*x5 - x0*x7*M[1] - x10*x12 - x11*M[2] + x15*x16 - x18*x25*M[14] + x19*M[8] + x21*M[5] + x22*M[6] - x30*M[13] - x33*M[15] - x38*y - x39*x42 + x4*M[1] - x44*y - x45*z - x46*x48 - x51*M[29] - x57*(-75.0*x54 + x56) - x59*x60 - x59*x61 + x64*(x17 - x62) + x66*x67 + x66*x69 - x68*(x58 + x62) - x70*x71 - x72*(x58 + x65) - x78*x79 - x78*x80 - x8*M[5] - x82*(x77 + x81) - x86*x87 - x86*x94 - x9*M[6] - x90*(x*x43 - x*x89) - x91*(x*x24 + x85) - x92*x93 - x93*x95 - (x10 - x52)*M[7] - (x10 - x53)*M[9] - (x26 + x27)*M[10] - (x*x26 - x14*x34)*M[4] - (-pow(x, 5)*x75 - 225.0*x54 + 1050.0*x55)*M[20] - (-x1*x76 + x1*x81 + x59)*M[23] - (x1*x96 + x58 - x83*x97)*M[30] - (-x2*x76 + x2*x81 + x59)*M[25] - (-x2*x84 + x65 + x70)*M[32] - (x2*x96 + x58 - x83*x98)*M[34];
F[1] += -x*x38 - x*x44 - x1*x7*M[2] - x10*M[5] - x100*M[11] - x102*z - x103*z - x109*x71 - x11*M[1] + x112*x67 + x112*x69 - x113*x60 - x113*x61 - x117*x87 - x117*x94 - x12*x8 - x122*x79 - x122*x80 - x123*x92 - x123*x95 + x16*x17 - x16*x62 + x19*M[6] - x33*M[18] + x4*M[2] - x42*x63 + x5*y - x51*M[33] + x52*M[5] - x57*(x108 + x110) + x64*(x105 - x106) - x68*(x106 - 75.0*x107) - x72*(x108 + x111) - x82*(x121 + x24*y) - x9*M[8] - x90*(x43*y - x89*y) - x91*(x116 + x118) + x99*M[8] - (-x104 + x8)*M[9] - (-x21 + x8)*M[4] - (x26 + x29)*M[16] - (-x101*x14 + x26*y)*M[7] - (x108 - x119*x98 + x125*x2)*M[34] - (x109 - x115*x2 + x118*x2)*M[32] - (x111 + x113 - x120*x2)*M[25] - (-x0*x115 + x0*x118 + x109)*M[23] - (x0*x125 + x108 - x119*x126)*M[20] - (x101*x124 - 225.0*x107 - x75*pow(y, 5))*M[30];
F[2] += -x*x45 - x10*z*M[1] - x10*M[6] - x100*M[12] - x102*y - x103*y + x104*M[8] + x127*x17 - x127*x65 + x131*x67 + x131*x69 - x138*x60 - x138*x61 - x142*x92 - x142*x95 - x147*x79 - x147*x80 - x149*x87 - x149*x94 + x19*M[5] - x2*x7*M[3] - x30*M[17] + x4*M[3] - x48*x63 + x5*z - x50*x92 - x50*x95 + x53*M[6] - x57*(x133 + x134) + x64*(x135 - x136) - x68*(x133 + x136) - x71*(x136 + x137) - x72*(x130 - 75.0*x132) - x8*z*M[2] - x8*M[8] - x82*(x139 + x146) - x90*(-x128*x88 + x139) - x91*(x139 + x148) - (-x22 + x9)*M[4] - (x26 + x32)*M[19] - (x9 - x99)*M[7] - (-x128*x14 + x26*z)*M[9] - (-x0*x141 + x0*x143 + x151)*M[25] - (x0*x150 - x126*x144 + x133)*M[20] - (-x1*x141 + x1*x143 + x151)*M[32] - (-x1*x145 + x136 + x138)*M[23] - (x1*x150 + x133 - x144*x97)*M[30] - (x124*x128 - 225.0*x132 - x75*pow(z, 5))*M[34];
}

void P2M(double x, double y, double z, double q, double * M, int order) {
switch (order) {
  case 1:
    P2M_1(x, y, z, q, M);
    break;
  case 2:
    P2M_2(x, y, z, q, M);
    break;
  case 3:
    P2M_3(x, y, z, q, M);
    break;
  case 4:
    P2M_4(x, y, z, q, M);
    break;
  }
}
void M2M(double x, double y, double z, double * M, double * Ms, int order) {
switch (order) {
  case 1:
    M2M_1(x, y, z, M, Ms);
    break;
  case 2:
    M2M_2(x, y, z, M, Ms);
    break;
  case 3:
    M2M_3(x, y, z, M, Ms);
    break;
  case 4:
    M2M_4(x, y, z, M, Ms);
    break;
  }
}
void M2L(double x, double y, double z, double * M, double * L, int order) {
switch (order) {
  case 1:
    M2L_1(x, y, z, M, L);
    break;
  case 2:
    M2L_2(x, y, z, M, L);
    break;
  case 3:
    M2L_3(x, y, z, M, L);
    break;
  case 4:
    M2L_4(x, y, z, M, L);
    break;
  }
}
void L2L(double x, double y, double z, double * L, double * Ls, int order) {
switch (order) {
  case 1:
    L2L_1(x, y, z, L, Ls);
    break;
  case 2:
    L2L_2(x, y, z, L, Ls);
    break;
  case 3:
    L2L_3(x, y, z, L, Ls);
    break;
  case 4:
    L2L_4(x, y, z, L, Ls);
    break;
  }
}
void L2P(double x, double y, double z, double * L, double * F, int order) {
switch (order) {
  case 1:
    L2P_1(x, y, z, L, F);
    break;
  case 2:
    L2P_2(x, y, z, L, F);
    break;
  case 3:
    L2P_3(x, y, z, L, F);
    break;
  case 4:
    L2P_4(x, y, z, L, F);
    break;
  }
}
void M2P(double x, double y, double z, double * M, double * F, int order) {
switch (order) {
  case 1:
    M2P_1(x, y, z, M, F);
    break;
  case 2:
    M2P_2(x, y, z, M, F);
    break;
  case 3:
    M2P_3(x, y, z, M, F);
    break;
  case 4:
    M2P_4(x, y, z, M, F);
    break;
  }
}
